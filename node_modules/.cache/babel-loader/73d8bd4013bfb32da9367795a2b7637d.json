{"ast":null,"code":"import namor from \"namor\";\n\nconst range = len => {\n  const arr = [];\n\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    lastName: namor.generate({\n      words: 1,\n      numbers: 0\n    }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status: statusChance > 0.66 ? \"relationship\" : statusChance > 0.33 ? \"complicated\" : \"single\"\n  };\n};\n\nexport default function makeData() {\n  for (var _len = arguments.length, lens = new Array(_len), _key = 0; _key < _len; _key++) {\n    lens[_key] = arguments[_key];\n  }\n\n  const makeDataLevel = function () {\n    let depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const len = lens[depth];\n    return range(len).map(d => {\n      return { ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined\n      };\n    });\n  };\n\n  return makeDataLevel();\n}","map":{"version":3,"names":["namor","range","len","arr","i","push","newPerson","statusChance","Math","random","firstName","generate","words","numbers","lastName","age","floor","visits","progress","status","makeData","lens","makeDataLevel","depth","map","d","subRows","undefined"],"sources":["/Users/nguyenquocquy/Documents/INTERN FPT/light-bootstrap-dashboard-react/src/views/table/makeData.js"],"sourcesContent":["import namor from \"namor\";\n\nconst range = (len) => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nconst newPerson = () => {\n  const statusChance = Math.random();\n  return {\n    firstName: namor.generate({ words: 1, numbers: 0 }),\n    lastName: namor.generate({ words: 1, numbers: 0 }),\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? \"relationship\"\n        : statusChance > 0.33\n        ? \"complicated\"\n        : \"single\",\n  };\n};\n\nexport default function makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth];\n    return range(len).map((d) => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAK,GAAIC,GAAD,IAAS;EACrB,MAAMC,GAAG,GAAG,EAAZ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;IAC5BD,GAAG,CAACE,IAAJ,CAASD,CAAT;EACD;;EACD,OAAOD,GAAP;AACD,CAND;;AAQA,MAAMG,SAAS,GAAG,MAAM;EACtB,MAAMC,YAAY,GAAGC,IAAI,CAACC,MAAL,EAArB;EACA,OAAO;IACLC,SAAS,EAAEV,KAAK,CAACW,QAAN,CAAe;MAAEC,KAAK,EAAE,CAAT;MAAYC,OAAO,EAAE;IAArB,CAAf,CADN;IAELC,QAAQ,EAAEd,KAAK,CAACW,QAAN,CAAe;MAAEC,KAAK,EAAE,CAAT;MAAYC,OAAO,EAAE;IAArB,CAAf,CAFL;IAGLE,GAAG,EAAEP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,EAA3B,CAHA;IAILQ,MAAM,EAAET,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,GAA3B,CAJH;IAKLS,QAAQ,EAAEV,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgB,GAA3B,CALL;IAMLU,MAAM,EACJZ,YAAY,GAAG,IAAf,GACI,cADJ,GAEIA,YAAY,GAAG,IAAf,GACA,aADA,GAEA;EAXD,CAAP;AAaD,CAfD;;AAiBA,eAAe,SAASa,QAAT,GAA2B;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EACxC,MAAMC,aAAa,GAAG,YAAe;IAAA,IAAdC,KAAc,uEAAN,CAAM;IACnC,MAAMrB,GAAG,GAAGmB,IAAI,CAACE,KAAD,CAAhB;IACA,OAAOtB,KAAK,CAACC,GAAD,CAAL,CAAWsB,GAAX,CAAgBC,CAAD,IAAO;MAC3B,OAAO,EACL,GAAGnB,SAAS,EADP;QAELoB,OAAO,EAAEL,IAAI,CAACE,KAAK,GAAG,CAAT,CAAJ,GAAkBD,aAAa,CAACC,KAAK,GAAG,CAAT,CAA/B,GAA6CI;MAFjD,CAAP;IAID,CALM,CAAP;EAMD,CARD;;EAUA,OAAOL,aAAa,EAApB;AACD"},"metadata":{},"sourceType":"module"}